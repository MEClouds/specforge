name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: production

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create new task definitions with latest images
        run: |
          # Get current task definitions
          BACKEND_TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition specforge-production-backend \
            --query 'taskDefinition')

          FRONTEND_TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition specforge-production-frontend \
            --query 'taskDefinition')

          # Update image URIs
          BACKEND_IMAGE="${{ steps.login-ecr.outputs.registry }}/specforge-production-backend:${{ github.sha }}"
          FRONTEND_IMAGE="${{ steps.login-ecr.outputs.registry }}/specforge-production-frontend:${{ github.sha }}"

          # Create new task definitions
          echo "$BACKEND_TASK_DEF" | jq --arg IMAGE "$BACKEND_IMAGE" \
            '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
            > backend-task-def.json

          echo "$FRONTEND_TASK_DEF" | jq --arg IMAGE "$FRONTEND_IMAGE" \
            '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
            > frontend-task-def.json

          # Register new task definitions
          aws ecs register-task-definition --cli-input-json file://backend-task-def.json
          aws ecs register-task-definition --cli-input-json file://frontend-task-def.json

      - name: Implement blue-green deployment for backend
        run: |
          # Get current service configuration
          CURRENT_SERVICE=$(aws ecs describe-services \
            --cluster specforge-production-cluster \
            --services specforge-production-backend \
            --query 'services[0]')

          # Create temporary green service
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition specforge-production-backend \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          aws ecs create-service \
            --cluster specforge-production-cluster \
            --service-name specforge-production-backend-green \
            --task-definition "$TASK_DEFINITION" \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "$(echo "$CURRENT_SERVICE" | jq -r '.networkConfiguration')" \
            --load-balancers "$(echo "$CURRENT_SERVICE" | jq -r '.loadBalancers')"

          # Wait for green service to be stable
          aws ecs wait services-stable \
            --cluster specforge-production-cluster \
            --services specforge-production-backend-green

          # Update target group to point to green service
          # This is a simplified approach - in practice, you'd use weighted routing

          # Scale down blue service
          aws ecs update-service \
            --cluster specforge-production-cluster \
            --service specforge-production-backend \
            --desired-count 0

          # Wait for blue service to scale down
          aws ecs wait services-stable \
            --cluster specforge-production-cluster \
            --services specforge-production-backend

          # Update blue service with new task definition
          aws ecs update-service \
            --cluster specforge-production-cluster \
            --service specforge-production-backend \
            --task-definition "$TASK_DEFINITION" \
            --desired-count 2

          # Wait for blue service to be stable
          aws ecs wait services-stable \
            --cluster specforge-production-cluster \
            --services specforge-production-backend

          # Delete green service
          aws ecs delete-service \
            --cluster specforge-production-cluster \
            --service specforge-production-backend-green \
            --force

      - name: Update frontend service
        run: |
          # Update frontend service (simpler rolling update)
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition specforge-production-frontend \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          aws ecs update-service \
            --cluster specforge-production-cluster \
            --service specforge-production-frontend \
            --task-definition "$TASK_DEFINITION" \
            --force-new-deployment

          # Wait for frontend service to stabilize
          aws ecs wait services-stable \
            --cluster specforge-production-cluster \
            --services specforge-production-frontend

      - name: Run comprehensive smoke tests
        run: |
          # Get ALB DNS name
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names specforge-production-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)

          echo "Running comprehensive smoke tests against http://$ALB_DNS"

          # Test backend health
          curl -f "http://$ALB_DNS/api/health" || exit 1

          # Test frontend
          curl -f "http://$ALB_DNS/health" || exit 1

          # Test API endpoints
          curl -f "http://$ALB_DNS/api/conversations" -H "Content-Type: application/json" || exit 1

          # Test WebSocket connection (basic check)
          curl -f "http://$ALB_DNS/socket.io/" || exit 1

          echo "All smoke tests passed!"

      - name: Create deployment tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "deploy-$(date +%Y%m%d-%H%M%S)" -m "Production deployment of ${{ github.sha }}"
          git push origin --tags

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          text: |
            üöÄ Production deployment ${{ job.status }}!
            Environment: ${{ env.ENVIRONMENT }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Tag: deploy-$(date +%Y%m%d-%H%M%S)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    environment: production

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Rollback to previous version
        run: |
          # Get previous task definition revisions
          BACKEND_PREV=$(aws ecs list-task-definitions \
            --family-prefix specforge-production-backend \
            --status ACTIVE \
            --sort DESC \
            --query 'taskDefinitionArns[1]' \
            --output text)

          FRONTEND_PREV=$(aws ecs list-task-definitions \
            --family-prefix specforge-production-frontend \
            --status ACTIVE \
            --sort DESC \
            --query 'taskDefinitionArns[1]' \
            --output text)

          # Rollback services
          aws ecs update-service \
            --cluster specforge-production-cluster \
            --service specforge-production-backend \
            --task-definition "$BACKEND_PREV"

          aws ecs update-service \
            --cluster specforge-production-cluster \
            --service specforge-production-frontend \
            --task-definition "$FRONTEND_PREV"

          # Wait for rollback to complete
          aws ecs wait services-stable \
            --cluster specforge-production-cluster \
            --services specforge-production-backend specforge-production-frontend

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: "warning"
          channel: "#deployments"
          text: |
            ‚ö†Ô∏è Production rollback completed!
            Previous deployment failed and has been rolled back.
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
