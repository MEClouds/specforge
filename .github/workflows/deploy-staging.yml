name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: staging

jobs:
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update ECS service with new images
        run: |
          # Update backend service
          aws ecs update-service \
            --cluster specforge-staging-cluster \
            --service specforge-staging-backend \
            --task-definition $(aws ecs describe-task-definition \
              --task-definition specforge-staging-backend \
              --query 'taskDefinition.family' \
              --output text) \
            --force-new-deployment

          # Update frontend service
          aws ecs update-service \
            --cluster specforge-staging-cluster \
            --service specforge-staging-frontend \
            --task-definition $(aws ecs describe-task-definition \
              --task-definition specforge-staging-frontend \
              --query 'taskDefinition.family' \
              --output text) \
            --force-new-deployment

      - name: Wait for deployment to complete
        run: |
          echo "Waiting for backend service to stabilize..."
          aws ecs wait services-stable \
            --cluster specforge-staging-cluster \
            --services specforge-staging-backend

          echo "Waiting for frontend service to stabilize..."
          aws ecs wait services-stable \
            --cluster specforge-staging-cluster \
            --services specforge-staging-frontend

      - name: Run smoke tests
        run: |
          # Get ALB DNS name
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names specforge-staging-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)

          # Wait for health checks
          echo "Running smoke tests against http://$ALB_DNS"

          # Test backend health
          curl -f "http://$ALB_DNS/api/health" || exit 1

          # Test frontend
          curl -f "http://$ALB_DNS/health" || exit 1

          echo "Smoke tests passed!"

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          text: |
            Staging deployment ${{ job.status }}!
            Environment: ${{ env.ENVIRONMENT }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
